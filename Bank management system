#include<iostream>
#include<fstream>
#include<cctype>
using namespace std;
class account
{
private:
int acno,pin;
char name[50];
int deposit;
char type;
char n;
char d;
public:
void create_account();
void show_account()const;
void modify();
void dep(int);
void draw(int);
void report()const;
int retacno()const;
int retdeposit()const;
int retpin()const;
char rettype()const;
};   
void account::create_account()
{
system("CLS");
cout<<"\n\t\t\tEnter the Account No.:";
cin>>acno;
cout<<"\n\t\t\tEnter pin No.:";
cin>>pin;
cout<<"\n\n\t\t\tEnter the Name of the Account holder:";
cin.ignore();
cin.getline(name,50);
cout<<"\n\t\t\tEnter Type of the Account(C/S):";
cin>>type;
type=toupper(type);
cout<<"\n\t\t\tEnter The Initial amount:";
cin>>deposit;
if(deposit>=1000)
{
cout<<"\n\n\t\t\tAccount Created..";
}
else
{
cout<<"\n\n\t\t\tInsufficient balance to maintain a account...";
}

}

void account::show_account()const
{
cout<<"\n\t\t\tAccount No.:"<<acno;
cout<<"\n\t\t\tAccount Holder Name:";
cout<<name;
cout<<"\n\t\t\tType of Account:"<<type;
cout<<"\n\t\t\tBalance amount:"<<deposit;
}
void account::modify()
{
cout<<"\n\t\t\tAccount No."<<acno;
cout<<"\n\n\t\t\t1.Modify Account Holder Name";
cout<<"\n\t\t\t2.Modify Type of Account";
cout<<"\n\t\t\t3.Modify pin";
cout<<"\n\t\t\t4.Modify both type of account and pin:";
cout<<"\n\t\t\t5.Modify both name and pin:";
cout<<"\n\t\t\t6.Modify both name and type of account:";
cout<<"\n\t\t\t7.Modify all account details:";
cout<<"\n\n\t\t\tselect your option(1-7):";
cin>>n;
switch(n)
{
case'1':
system("CLS");
cout<<"\n\t\t\tModify Account Holder Name:";
cin.ignore();
cin.getline(name,50);
break;
case'2':
system("CLS");
cout<<"\n\t\t\tModify Type of Account:";
cin>>type;
type=toupper(type);
break;
case'3':
system("CLS");
cout<<"\n\t\t\tModify pin:";
cin>>pin;
break;
case'4':
system("CLS");
cout<<"\n\t\t\tModify Type of Account:";
cin>>type;
cout<<"\n\t\t\tModify pin:";
cin>>pin;
break;
case'5':
system("CLS");	
cout<<"\n\t\t\tModify Account Holder Name:";
cin.ignore();
cin.getline(name,50);
cout<<"\n\t\t\tMddify pin:";
cin>>pin;
break;
case'6':
system("CLS");
cout<<"\n\t\t\tModify Account Holder Name:";
cin.ignore();
cin.getline(name,50);
cout<<"\n\t\t\tModify Type of Account:";
cin>>type;
break;
case'7':
system("CLS");
cout<<"\n\t\t\tModify Account Holder Name:";
cin.ignore();
cin.getline(name,50);
cout<<"\n\t\t\tModify Type of Account:";
cin>>type;
cout<<"\n\t\t\tModify pin:";
cin>>pin;	
break;
}
}
void account::dep(int x)
{
deposit+=x;
}
void account::draw(int x)
{
deposit-=x;
}
void account::report()const
{
cout<<acno<<"\t\t"<<name<<"\t\t"<<type<<"\t"<<deposit<<endl;
}
int account::retacno()const
{
return acno;
}
int account::retpin()const
{
return pin;
}
int account::retdeposit()const
{
return deposit;
}
char account::rettype()const
{
return type;
}
void write_account();
void display_sp(int,int);
void modify_account(int,int);
void delete_account(int,int);
void display_all();
void deposit_withdraw(int,int,int);
int main()
{
char ch;
int num,deposit,pinn;
char no;
do
{
system("CLS");
cout<<"\n\n\t\t\t\t======================\n";
cout<<"\t\t\t\tBANK MANAGEMENT SYSTEM";
cout<<"\n\t\t\t\t======================\n";
cout<<"\t\t\t\t ::MAIN MENU::\n";
cout<<"\n\t\t\t\t1.NEW ACCOUNT";
cout<<"\n\t\t\t\t2.EXISTING ACCOUNT";
cout<<"\n\t\t\t\t3.ALL ACCOUNT HOLDERS LIST";
cout<<"\n\t\t\t\t4.EXIT";
cout<<"\n\n\t\t\t\tSelect Your Option(1-4):";
cin>>ch;
switch(ch)
{
case'1':
write_account();
break;
case'2':
system("CLS");
cout<<"\n\t\t\t\t1.DEPOSIT AMOUNT";
cout<<"\n\t\t\t\t2.WITHDRAW AMOUNT";
cout<<"\n\t\t\t\t3.BALANCE ENQUIRY";
cout<<"\n\t\t\t\t4.CLOSE AN ACCOUNT";
cout<<"\n\t\t\t\t5.MODIFY AN ACCOUNT";
cout<<"\n\t\t\t\t6.EXIT";
cout<<"\n\n\t\t\t\tSelect Your Option(1-6):";
cin>>no;

switch(no)
{
case'1':
system("CLS");
cout<<"\n\n\t\t\tEnter The account No.:";cin>>num;
cout<<"\n\n\t\t\tEnter pin:";cin>>pinn;
deposit_withdraw(num,pinn,1);
break;
case'2':
system("CLS");
cout<<"\n\n\t\t\tEnter The account No.:";cin>>num;
cout<<"\n\n\t\t\tEnter pin:";cin>>pinn;
deposit_withdraw(num,pinn,2);
break;
case'3':
system("CLS");
cout<<"\n\n\t\t\tEnter The account No.:";cin>>num;
cout<<"\n\n\t\t\tEnter pin:";cin>>pinn;
display_sp(num,pinn);
break;
case'4':
system("CLS");
cout<<"\n\n\t\t\tEnter The account No.:";cin>>num;
cout<<"\n\n\t\t\tEnter pin:";cin>>pinn;
delete_account(num,pinn);
break;
case'5':
system("CLS");
cout<<"\n\n\t\t\tEnter The account No.:";
cin>>num;
cout<<"\n\n\t\t\tEnter pin:";cin>>pinn;
modify_account(num,pinn);
break;
case'6':
system("CLS");
cout<<"\n\n\t\tBrought To You By team 1\n\n\t\t\t18121A1201\n\t\t\t18121A1215\n\t\t\t18121A1236\n\t\t\t18121A1257\n\n\t\t\tThank You...\n\n";
exit(0);
break;
}
break;
case'3':
system("CLS");
display_all();
break;
case'4':
system("CLS");
cout<<"\n\n\t\tBrought To You By team 1\n\n\t\t\t18121A1201\n\t\t\t18121A1215\n\t\t\t18121A1236\n\t\t\t18121A1257\n\n\t\t\tThank You...\n\n";
exit(0);
break;

default:cout<<"\a";
}
cin.ignore();
cin.get();
}while(ch!='4');
return 0;
}
void write_account()
{
account ac;
ofstream outFile;
outFile.open("account.dat",ios::binary|ios::app);
ac.create_account();
outFile.write(reinterpret_cast<char*>(&ac),sizeof(account));
outFile.close();
}
void display_sp(int n,int p)
{
account ac;
bool flag=false;
ifstream inFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"\n\n\t\t\tFile could not open!!Press any Key...";
return;
}
cout<<"\n\t\t\tBALANCE DETAILS\n";
while(inFile.read(reinterpret_cast<char*>(&ac),sizeof(account)))
{
if(ac.retacno()==n&&ac.retpin()==p)
{
ac.show_account();
flag=true;
}
}
inFile.close();
if(flag==false)
cout<<"\n\n\t\t\tAccount number does not exist";
}
void modify_account(int n,int p)
{
bool found=false;
account ac;
fstream File;
File.open("account.dat",ios::binary|ios::in|ios::out);
if(!File)
{
cout<<"\n\n\t\t\tFile could not open!!PressanyKey...";
return;
}
while(!File.eof()&&found==false)
{
File.read(reinterpret_cast<char*>(&ac),sizeof(account));
if(ac.retacno()==n&&ac.retpin()==p)
{
ac.show_account();
cout<<"\n\n\t\t\tEnter The New account details"<<endl;
ac.modify();
int pos=(-1)*static_cast<int>(sizeof(account));
File.seekp(pos,ios::cur);
File.write(reinterpret_cast<char*>(&ac),sizeof(account));
cout<<"\n\n\t\t\tRecord Updated";
found=true;
}
}
File.close();
if(found==false)
cout<<"\n\n\t\t\tRecord Not Found";
}
void delete_account(int n,int p)
{
account ac;
ifstream inFile;
ofstream outFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"\n\n\t\t\tFile could not beopen!!Press any Key...";
return;
}
outFile.open("Temp.dat",ios::binary);
inFile.seekg(0,ios::beg);
while(inFile.read(reinterpret_cast<char*>(&ac),sizeof(account)))
{
if(ac.retacno()!=n||ac.retpin()!=p)
{
outFile.write(reinterpret_cast<char*>(&ac),sizeof(account));
}
}
inFile.close();
outFile.close();
remove("account.dat");
rename("Temp.dat","account.dat");
cout<<"\n\n\t\t\tRecord Deleted..";
}
void display_all()
{
system("CLS");
account ac;

ifstream inFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"\n\n\t\t\tFile could not be open!!Press any Key...";
return;
}
cout<<"\n\n\t\tACCOUNT HOLDER LIST\n\n";
cout<<"====================================================\n";
cout<<"A/cno.\t\tNAME \t\tType \tBalance\n";
cout<<"====================================================\n";
while(inFile.read(reinterpret_cast<char*>(&ac),sizeof(account)))
{
ac.report();
}
inFile.close();
}
void deposit_withdraw(int n,int p,int option)
{
int amt;
bool found=false;
account ac;
fstream File;
File.open("account.dat",ios::binary|ios::in|ios::out);
if(!File)
{
cout<<"\n\n\t\t\tFile could not open!!Press any Key...";
return;
}
while(!File.eof()&&found==false)
{
File.read(reinterpret_cast<char*>(&ac),sizeof(account));
if(ac.retacno()==n&&ac.retpin()==p)
{
ac.show_account();
if(option==1)
{
cout<<"\n\n\t\t\tTO DEPOSIT AMOUNT";
cout<<"\n\n\t\t\tEnter The amount to be deposited:";
cin>>amt;
ac.dep(amt);
}
if(option==2)
{
cout<<"\n\n\t\t\tTO WITH DRAW AMOUNT";
cout<<"\n\n\t\t\tEnter The amount to withdraw:";
cin>>amt;
int bal=ac.retdeposit()-amt;
if(bal<1000)
cout<<"\n\n\t\t\tInsufficient balance";
else
ac.draw(amt);
}
int pos=(-1)*static_cast<int>(sizeof(ac));
File.seekp(pos,ios::cur);
File.write(reinterpret_cast<char*>(&ac),sizeof(account));
cout<<"\n\n\t\t\tRecord Updated";
found=true;
}
}
File.close();
if(found==false)
cout<<"\n\n\t\t\tIncorrect details";
}
